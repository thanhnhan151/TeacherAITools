// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TeacherAITools.Infrastructure.Common.Persistence;

#nullable disable

namespace TeacherAITools.Infrastructure.Migrations
{
    [DbContext(typeof(TeacherAIToolsDbContext))]
    [Migration("20250526075550_Feedback")]
    partial class Feedback
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BlogId"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("LessonPlanId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("BlogId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LessonPlanId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookId"));

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("BookNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("BookId");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("CityId");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentId"));

                    b.Property<int>("BlogId")
                        .HasColumnType("integer");

                    b.Property<string>("CommentBody")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CommentId");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Curriculum", b =>
                {
                    b.Property<int>("CurriculumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CurriculumId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("GradeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("SchoolYearId")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPeriods")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("CurriculumId");

                    b.HasIndex("GradeId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("Curriculum", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.CurriculumActivity", b =>
                {
                    b.Property<int>("CurriculumActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CurriculumActivityId"));

                    b.Property<string>("CurriculumAcitityDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CurriculumId")
                        .HasColumnType("integer");

                    b.HasKey("CurriculumActivityId");

                    b.HasIndex("CurriculumId");

                    b.ToTable("CurriculumActivity", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.CurriculumDetail", b =>
                {
                    b.Property<int>("CurriculumDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CurriculumDetailId"));

                    b.Property<string>("CurriculumContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurriculumGoal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CurriculumId")
                        .HasColumnType("integer");

                    b.Property<int?>("CurriculumSubSectionId")
                        .HasColumnType("integer");

                    b.HasKey("CurriculumDetailId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("CurriculumSubSectionId");

                    b.ToTable("CurriculumDetail", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.CurriculumFeedback", b =>
                {
                    b.Property<int>("CurriculumFeedBackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CurriculumFeedBackId"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("CurriculumId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CurriculumFeedBackId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("UserId");

                    b.ToTable("CurriculumFeedback", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.CurriculumSection", b =>
                {
                    b.Property<int>("CurriculumSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CurriculumSectionId"));

                    b.Property<string>("CurriculumSectionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CurriculumTopicId")
                        .HasColumnType("integer");

                    b.HasKey("CurriculumSectionId");

                    b.HasIndex("CurriculumTopicId");

                    b.ToTable("CurriculumSection", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.CurriculumSubSection", b =>
                {
                    b.Property<int>("CurriculumSubSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CurriculumSubSectionId"));

                    b.Property<int?>("CurriculumSectionId")
                        .HasColumnType("integer");

                    b.Property<string>("CurriculumSubSectionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("CurriculumSubSectionId");

                    b.HasIndex("CurriculumSectionId");

                    b.ToTable("CurriculumSubSection", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.CurriculumTopic", b =>
                {
                    b.Property<int>("CurriculumTopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CurriculumTopicId"));

                    b.Property<string>("CurriculumTopicName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("CurriculumTopicId");

                    b.ToTable("CurriculumTopic", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DistrictId"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("DistrictId");

                    b.HasIndex("CityId");

                    b.ToTable("District", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GradeId"));

                    b.Property<int>("GradeNumber")
                        .HasColumnType("integer");

                    b.HasKey("GradeId");

                    b.ToTable("Grade", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LessonId"));

                    b.Property<string>("Apply")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Knowledge")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LessonTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("NoteId")
                        .HasColumnType("integer");

                    b.Property<string>("Practice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SchoolSupply")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartUp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalPeriods")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<int>("WeekId")
                        .HasColumnType("integer");

                    b.HasKey("LessonId");

                    b.HasIndex("LessonTypeId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("NoteId");

                    b.HasIndex("WeekId");

                    b.ToTable("Lesson", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.LessonHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apply")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Knowledge")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LessonPlanId")
                        .HasColumnType("integer");

                    b.Property<string>("Practice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SchoolSupply")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartUp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LessonPlanId");

                    b.ToTable("LessonHistory", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.LessonType", b =>
                {
                    b.Property<int>("LessonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LessonTypeId"));

                    b.Property<string>("LessonTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("LessonTypeId");

                    b.ToTable("LessonType", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ModuleId"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("integer");

                    b.Property<string>("Desciption")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("GradeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPeriods")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("ModuleId");

                    b.HasIndex("BookId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("GradeId");

                    b.ToTable("Module", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NoteId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("NoteId");

                    b.ToTable("Note", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("NotificationId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NotificationTypeName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("NotificationTypeId");

                    b.ToTable("NotificationType", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Prompt", b =>
                {
                    b.Property<int>("PromptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PromptId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("PromptId");

                    b.HasIndex("LessonId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Prompt", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuizId"));

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("QuizId");

                    b.HasIndex("LessonId");

                    b.ToTable("Quiz", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.QuizAnswer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizAnswer", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.QuizQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("QuizId")
                        .HasColumnType("integer");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestion", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SchoolId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("WardId")
                        .HasColumnType("integer");

                    b.HasKey("SchoolId");

                    b.HasIndex("WardId");

                    b.ToTable("School", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.SchoolYear", b =>
                {
                    b.Property<int>("SchoolYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SchoolYearId"));

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.HasKey("SchoolYearId");

                    b.ToTable("SchoolYear", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.TeacherLesson", b =>
                {
                    b.Property<int>("LessonPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LessonPlanId"));

                    b.Property<string>("Apply")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisapprovedReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Knowledge")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Practice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PromptId")
                        .HasColumnType("integer");

                    b.Property<int>("RejectedCount")
                        .HasColumnType("integer");

                    b.Property<string>("SchoolSupply")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartUp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LessonPlanId");

                    b.HasIndex("PromptId");

                    b.HasIndex("UserId");

                    b.ToTable("LessonPlan", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<int?>("GradeId")
                        .HasColumnType("integer");

                    b.Property<string>("ImgURL")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("ResetPasswordOtp")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("WardId")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("GradeId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("WardId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Ward", b =>
                {
                    b.Property<int>("WardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WardId"));

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("WardId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Ward", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Week", b =>
                {
                    b.Property<int>("WeekId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WeekId"));

                    b.Property<int>("WeekNumber")
                        .HasColumnType("integer");

                    b.HasKey("WeekId");

                    b.ToTable("Week", (string)null);
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Blog", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.Category", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("TeacherAITools.Domain.Entities.TeacherLesson", "LessonPlan")
                        .WithMany("Blogs")
                        .HasForeignKey("LessonPlanId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("LessonPlan");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Comment", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("TeacherAITools.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Curriculum", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.Grade", "Grade")
                        .WithMany("Curriculums")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TeacherAITools.Domain.Entities.SchoolYear", "SchoolYear")
                        .WithMany("Curriculums")
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.CurriculumActivity", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.Curriculum", "Curriculum")
                        .WithMany("CurriculumActivities")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Curriculum");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.CurriculumDetail", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.Curriculum", "Curriculum")
                        .WithMany("CurriculumDetails")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TeacherAITools.Domain.Entities.CurriculumSubSection", "CurriculumSubSection")
                        .WithMany("CurriculumDetails")
                        .HasForeignKey("CurriculumSubSectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Curriculum");

                    b.Navigation("CurriculumSubSection");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.CurriculumFeedback", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.Curriculum", "Curriculum")
                        .WithMany("CurriculumFeedbacks")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TeacherAITools.Domain.Entities.User", "User")
                        .WithMany("CurriculumFeedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Curriculum");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.CurriculumSection", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.CurriculumTopic", "CurriculumTopic")
                        .WithMany("CurriculumSections")
                        .HasForeignKey("CurriculumTopicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurriculumTopic");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.CurriculumSubSection", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.CurriculumSection", "CurriculumSection")
                        .WithMany("CurriculumSubSections")
                        .HasForeignKey("CurriculumSectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurriculumSection");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.District", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.LessonType", "LessonType")
                        .WithMany("Lessons")
                        .HasForeignKey("LessonTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("TeacherAITools.Domain.Entities.Module", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("TeacherAITools.Domain.Entities.Note", "Note")
                        .WithMany("Lessons")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("TeacherAITools.Domain.Entities.Week", "Week")
                        .WithMany("Lessons")
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("LessonType");

                    b.Navigation("Module");

                    b.Navigation("Note");

                    b.Navigation("Week");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.LessonHistory", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.TeacherLesson", "LessonPlan")
                        .WithMany("LessonHistories")
                        .HasForeignKey("LessonPlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("LessonPlan");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Module", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.Book", "Book")
                        .WithMany("Modules")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("TeacherAITools.Domain.Entities.Curriculum", "Curriculum")
                        .WithMany("Modules")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("TeacherAITools.Domain.Entities.Grade", "Grade")
                        .WithMany("Modules")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Curriculum");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Notification", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("TeacherAITools.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Prompt", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.Lesson", "Lesson")
                        .WithOne("Prompt")
                        .HasForeignKey("TeacherAITools.Domain.Entities.Prompt", "LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeacherAITools.Domain.Entities.User", "User")
                        .WithMany("Prompts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Quiz", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Quizzes")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.QuizAnswer", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.QuizQuestion", "QuizQuestion")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("QuizQuestion");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.QuizQuestion", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.School", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.Ward", "Ward")
                        .WithMany("Schools")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.TeacherLesson", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.Prompt", "Prompt")
                        .WithMany("LessonPlans")
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TeacherAITools.Domain.Entities.User", "User")
                        .WithMany("LessonPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Prompt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.User", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.Grade", "Grade")
                        .WithMany("Users")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TeacherAITools.Domain.Entities.User", "Manager")
                        .WithMany("Teachers")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TeacherAITools.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("TeacherAITools.Domain.Entities.School", "School")
                        .WithMany("Users")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TeacherAITools.Domain.Entities.Ward", "Ward")
                        .WithMany("Users")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Grade");

                    b.Navigation("Manager");

                    b.Navigation("Role");

                    b.Navigation("School");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Ward", b =>
                {
                    b.HasOne("TeacherAITools.Domain.Entities.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Blog", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Book", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Category", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Curriculum", b =>
                {
                    b.Navigation("CurriculumActivities");

                    b.Navigation("CurriculumDetails");

                    b.Navigation("CurriculumFeedbacks");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.CurriculumSection", b =>
                {
                    b.Navigation("CurriculumSubSections");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.CurriculumSubSection", b =>
                {
                    b.Navigation("CurriculumDetails");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.CurriculumTopic", b =>
                {
                    b.Navigation("CurriculumSections");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.District", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Grade", b =>
                {
                    b.Navigation("Curriculums");

                    b.Navigation("Modules");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("Prompt");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.LessonType", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Module", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Note", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Prompt", b =>
                {
                    b.Navigation("LessonPlans");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.QuizQuestion", b =>
                {
                    b.Navigation("QuizAnswers");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.School", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.SchoolYear", b =>
                {
                    b.Navigation("Curriculums");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.TeacherLesson", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("LessonHistories");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CurriculumFeedbacks");

                    b.Navigation("LessonPlans");

                    b.Navigation("Notifications");

                    b.Navigation("Prompts");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Ward", b =>
                {
                    b.Navigation("Schools");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TeacherAITools.Domain.Entities.Week", b =>
                {
                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
